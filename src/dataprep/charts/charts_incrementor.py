import os
import pyodbc
import json
from utils import execute_stored_procedure
from .charts_utils import get_print_vendor_lists_stats
from config import (
    conn_str,
    charts_drop_off_location as windows_location,
    payment_reconciliation_location as csv_location,
    resource_loc,
)


def read_batch_size():
    """
    Reads the JSON file generated by get_and_save_batch_size and returns a
    dictionary with the batch size for each vendor.

    The JSON file is expected to be in the resource location and is named
    "chart_increment_sample_size.json". The dictionary returned is a mapping
    of vendor names to batch sizes.

    Parameters
    ----------
    None

    Returns
    -------
    dict
        A dictionary with the batch size for each vendor.
    """
    json_file_path = os.path.join(resource_loc, "chart_increment_sample_size.json")

    with open(json_file_path, "r") as json_file:
        left_sizes = json.load(json_file)

    batch_sizes = {}
    for vendor in left_sizes.keys():
        size = left_sizes[vendor]["Sample"]
        current_batch_size = {vendor: size}
        batch_sizes.update(current_batch_size)

    return batch_sizes


def increment_sql_charts(vndr_batch_sizes):
    """
    Increments the chartlookup table with the given vendor's batch size.

    Calls the stored procedure common.sp_increment_chartlookup for each vendor
    in the vndr_batch_sizes dictionary with the vendor name and batch size as
    parameters.

    Parameters
    ----------
    vndr_batch_sizes : dict
        A dictionary where the keys are vendor names and the values are the batch
        size for that vendor.

    Returns
    -------
    None
    """

    conn = pyodbc.connect(conn_str)
    cursor = conn.cursor()
    for vendor in vndr_batch_sizes.keys():
        execute_stored_procedure(
            "common.sp_increment_chartlookup", vendor, vndr_batch_sizes[vendor]
        )
    conn.commit()
    cursor.close()
    conn.close()


def move_windows_charts(active_vendor, batch_size):
    """
    Moves the specified number of charts from the left_charts.txt file to the
    main directory of charts for the given vendor.

    Parameters
    ----------
    active_vendor : str
        The name of the vendor.
    batch_size : int
        The number of charts to move.

    Returns
    -------
    None
    """
    
    global windows_location
    # Construct vendor's folder path
    vendor_location = os.path.join(windows_location, active_vendor)

    # Get all charts except left_charts.txt
    selected_charts = os.listdir(vendor_location)
    selected_charts.remove(f"{active_vendor}_left_charts.txt")

    # Read the left charts list
    left_charts_file_path = os.path.join(
        vendor_location, f"{active_vendor}_left_charts.txt"
    )
    with open(left_charts_file_path, "r") as f:
        left_charts = f.read().splitlines()

    # Determine how many charts to move, ensure it's not more than available charts
    move_count = min(batch_size, len(left_charts))

    # Move the charts
    charts_to_move = left_charts[:move_count]

    # Update the remaining left charts
    remaining_left_charts = left_charts[move_count:]

    # Add moved charts to selected_charts
    selected_charts.extend(charts_to_move)

    # Create empty JSON files
    for filename in charts_to_move:
        file_path = os.path.join(vendor_location, filename)
        # Create empty JSON files
        with open(file_path, "w") as f:
            pass  # This will create an empty file

    with open(left_charts_file_path, "w") as f:
        for i, chart in enumerate(remaining_left_charts):
            if i < len(left_charts) - 1:
                f.write(f"{chart}\n")
            else:
                f.write(f"{chart}")

    print(f"Moved {move_count} charts for vendor: {active_vendor}")


def increment_windows_charts(vndr_batch_sizes):
    """
    Increments the charts for each vendor in the vndr_batch_sizes dictionary.

    Calls the move_windows_charts function for each vendor in the dictionary
    with the vendor name and batch size as parameters.

    Parameters
    ----------
    vndr_batch_sizes : dict
        A dictionary where the keys are vendor names and the values are the batch
        size for that vendor.

    Returns
    -------
    None
    """
    
    for vendor in vndr_batch_sizes.keys():
        move_windows_charts(vendor, vndr_batch_sizes[vendor])


def move_csv_charts(active_vendor, batch_size):
    """
    Moves the given number of charts from the leftcharts.csv file to the charts_reconciliation.csv file for the given vendor.

    Parameters
    ----------
    active_vendor : str
        The name of the vendor.
    batch_size : int
        The number of charts to move.

    Returns
    -------
    None
    """
    
    global csv_location
    # Construct vendor's folder path
    vendor_location = os.path.join(csv_location, active_vendor)
    selected_charts_file_path = os.path.join(
        vendor_location, f"{active_vendor}_charts_reconciliation.csv"
    )
    selected_charts = open(selected_charts_file_path, "r").read().splitlines()[1:]

    left_charts_file_path = os.path.join(
        vendor_location, f"{active_vendor}_leftcharts.csv"
    )
    left_charts = open(left_charts_file_path, "r").read().splitlines()[1:]

    # Determine how many charts to move, ensure it's not more than available charts
    move_count = min(batch_size, len(left_charts))

    # Move the charts
    charts_to_move = left_charts[:move_count]

    # Update the remaining left charts
    remaining_left_charts = left_charts[move_count:]

    # Add moved charts to selected_charts
    selected_charts.extend(charts_to_move)

    with open(left_charts_file_path, "w") as f:
        f.write("chartname\n")
        for i, chart in enumerate(remaining_left_charts):
            if i < len(left_charts) - 1:
                f.write(f"{chart}\n")
            else:
                f.write(f"{chart}")

    with open(selected_charts_file_path, "w") as f:
        f.write("chartname\n")
        for i, chart in enumerate(selected_charts):
            if i < len(selected_charts) - 1:
                f.write(f"{chart}\n")
            else:
                f.write(f"{chart}")

    print(f"Moved {move_count} charts for vendor: {active_vendor}")


def increment_csv_charts(vndr_batch_sizes):
    """
    Increments the charts for each vendor in the vndr_batch_sizes dictionary.

    Calls the move_csv_charts function for each vendor in the dictionary
    with the vendor name and batch size as parameters.

    Parameters
    ----------
    vndr_batch_sizes : dict
        A dictionary where the keys are vendor names and the values are the batch
        size for that vendor.

    Returns
    -------
    None
    """
    for vendor in vndr_batch_sizes.keys():
        move_csv_charts(vendor, vndr_batch_sizes[vendor])


def increment_charts():
    """
    Increments the charts for each vendor in the vendor_batch_sizes dictionary.

    Calls the increment_windows_charts, increment_csv_charts, and increment_sql_charts
    functions for each vendor in the dictionary with the vendor name and batch size as
    parameters.

    Parameters
    ----------
    None

    Returns
    -------
    None
    """
    vendor_batch_sizes = read_batch_size()
    print("Incrementing Windows Charts")
    increment_windows_charts(vendor_batch_sizes)
    print()
    print("Incrementing CSV Charts")
    increment_csv_charts(vendor_batch_sizes)
    print()
    print("Incrementing SQL Charts")
    increment_sql_charts(vendor_batch_sizes)
    print("Moved SQL Charts")
    print()
    print("Printing Vendor Lists Stats:-\n")
    get_print_vendor_lists_stats()
